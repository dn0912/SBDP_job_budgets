{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CleanupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-cleanup"
      }
    },
    "PreprocessLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-preprocess"
      }
    },
    "CalculateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-calculate"
      }
    },
    "StartDashjobLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-start-job"
      }
    },
    "StartDashjobDashwithDashxrayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-start-job-with-xray"
      }
    },
    "PreprocessDashwithDashxrayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-preprocess-with-xray"
      }
    },
    "CalculateDashwithDashxrayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-calculate-with-xray"
      }
    },
    "StartDashjobDashwithDashredisLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-start-job-with-redis"
      }
    },
    "PreprocessDashwithDashredisLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-preprocess-with-redis"
      }
    },
    "CalculateDashwithDashredisLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-calculate-with-redis"
      }
    },
    "StartDashjobDashwithoutDashtracingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-start-job-without-tracing"
      }
    },
    "PreprocessDashwithoutDashtracingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-preprocess-without-tracing"
      }
    },
    "CalculateDashwithoutDashtracingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gsd-index-calculator-dev-calculate-without-tracing"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "gsd-index-calculator",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/gsd-index-calculator-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/gsd-index-calculator-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:ListBucket",
                    "s3:DeleteObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::test-task-update-data-v2",
                    "arn:aws:s3:::test-task-update-data-v2/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "apigateway:POST"
                  ],
                  "Resource": [
                    "arn:aws:apigateway:::/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:*"
                  ],
                  "Resource": [
                    "arn:aws:sqs:*:*:PreprocessedDataQueue",
                    "arn:aws:sqs:*:*:PreprocessedDataQueueXRay",
                    "arn:aws:sqs:*:*:PreprocessedDataQueueRedis",
                    "arn:aws:sqs:*:*:PreprocessedDataQueueWithoutTracing",
                    "arn:aws:sqs:*:*:PreprocessedDataQueueFiFo.fifo"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    "arn:aws:lambda:eu-central-1:*:function:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "PreprocessedDataQueueFiFo",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "PreprocessedDataQueueXRay",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "PreprocessedDataQueueRedis",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "PreprocessedDataQueueWithoutTracing",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "gsd-index-calculator",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "CleanupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-cleanup",
        "Handler": "src/helper.cleanup",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "cleanup S3 directories",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "BUCKET": "test-task-update-data-v2",
            "SUBRESULT_FOLDER": "test_results",
            "PIPELINE_RESULT_FOLDER": "gsd"
          }
        }
      },
      "DependsOn": [
        "CleanupLogGroup"
      ]
    },
    "CleanupLambdaVersionoNSayZp3BHS5w3r5qeaesJz5ufa3DG9RYs2BmG81Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CleanupLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "cleanup S3 directories"
      }
    },
    "PreprocessLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-preprocess",
        "Handler": "src/preprocessor.readAndFilterFile",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Preprocess lambda which sends SQS message afterwards: preprocess task update data (test data consists of 1000 tasks)\n",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "BUCKET": "test-task-update-data-v2",
            "FILE": "test_with_description_title_change_1000_single.json",
            "SUBRESULT_FOLDER": "test_results",
            "REGION": "eu-central-1",
            "QUEUE_NAME": "PreprocessedDataQueueFiFo.fifo",
            "REDIS_CONNECTION": "redis://:redis-password@18.156.33.173:6379"
          }
        }
      },
      "DependsOn": [
        "PreprocessLogGroup"
      ]
    },
    "PreprocessLambdaVersion8zQ4Dd6REZ2wumSHG59UEeXjhF7aVmI33wZoRC4Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PreprocessLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Preprocess lambda which sends SQS message afterwards: preprocess task update data (test data consists of 1000 tasks)\n"
      }
    },
    "CalculateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-calculate",
        "Handler": "src/calculator.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Single lambda - calulator lambda after receiving sqs message, fetch cleaned up test data from S3 and calculates GSD index\n",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "BUCKET": "test-task-update-data-v2",
            "SUBRESULT_FOLDER": "test_results",
            "PIPELINE_RESULT_FOLDER": "gsd",
            "REDIS_CONNECTION": "redis://:redis-password@18.156.33.173:6379"
          }
        }
      },
      "DependsOn": [
        "CalculateLogGroup"
      ]
    },
    "CalculateLambdaVersion9BqScGzXEsE6wLqM4MsEBHvhvLOAeMkEiYpKzWhqZU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CalculateLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Single lambda - calulator lambda after receiving sqs message, fetch cleaned up test data from S3 and calculates GSD index\n"
      }
    },
    "StartDashjobLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-start-job",
        "Handler": "src/job_manager.startJob",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Single endpoint to trigger a job\n",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "REDIS_CONNECTION": "redis://:redis-password@18.156.33.173:6379"
          }
        }
      },
      "DependsOn": [
        "StartDashjobLogGroup"
      ]
    },
    "StartDashjobLambdaVersiontsO2eS01U6dxypjLlCzJzayV8GSoLEUyKfMgN3Xkaw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StartDashjobLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Single endpoint to trigger a job\n"
      }
    },
    "StartDashjobDashwithDashxrayLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-start-job-with-xray",
        "Handler": "src/xray_version/job_manager-xray.startJob",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Single endpoint to trigger a job\n",
        "TracingConfig": {
          "Mode": "Active"
        }
      },
      "DependsOn": [
        "StartDashjobDashwithDashxrayLogGroup"
      ]
    },
    "StartDashjobDashwithDashxrayLambdaVersionGccnLqy6gTSvbxzJ0QWReRqplbfctyTZ1YJXaCE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StartDashjobDashwithDashxrayLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Single endpoint to trigger a job\n"
      }
    },
    "PreprocessDashwithDashxrayLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-preprocess-with-xray",
        "Handler": "src/xray_version/preprocessor-xray.readAndFilterFile",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Preprocess lambda which sends SQS message afterwards: preprocess task update data (test data consists of 1000 tasks)\n",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "BUCKET": "test-task-update-data-v2",
            "SUBRESULT_FOLDER": "test_results",
            "REGION": "eu-central-1",
            "QUEUE_NAME": "PreprocessedDataQueueXRay"
          }
        }
      },
      "DependsOn": [
        "PreprocessDashwithDashxrayLogGroup"
      ]
    },
    "PreprocessDashwithDashxrayLambdaVersionxPYGVxSb6s937z7IskbivKXJzpQ8hNaWlW2YUbNeA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PreprocessDashwithDashxrayLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Preprocess lambda which sends SQS message afterwards: preprocess task update data (test data consists of 1000 tasks)\n"
      }
    },
    "CalculateDashwithDashxrayLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-calculate-with-xray",
        "Handler": "src/xray_version/calculator-xray.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Single lambda - calulator lambda after receiving sqs message, fetch cleaned up test data from S3 and calculates GSD index\n",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "BUCKET": "test-task-update-data-v2",
            "SUBRESULT_FOLDER": "test_results",
            "PIPELINE_RESULT_FOLDER": "gsd"
          }
        }
      },
      "DependsOn": [
        "CalculateDashwithDashxrayLogGroup"
      ]
    },
    "CalculateDashwithDashxrayLambdaVersionkxuEweuqPUVSWmTLZ7xzQD51zaggJmUULojL7RNAwA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CalculateDashwithDashxrayLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Single lambda - calulator lambda after receiving sqs message, fetch cleaned up test data from S3 and calculates GSD index\n"
      }
    },
    "StartDashjobDashwithDashredisLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-start-job-with-redis",
        "Handler": "src/redis_version/job_manager-redis.startJob",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Single endpoint to trigger a job\n",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "REDIS_CONNECTION": "redis://:redis-password@18.156.33.173:6379"
          }
        }
      },
      "DependsOn": [
        "StartDashjobDashwithDashredisLogGroup"
      ]
    },
    "StartDashjobDashwithDashredisLambdaVersionjd6tbXN8oXaZ58fhsxHSIoAuQTewqD4BvmqJpvqo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StartDashjobDashwithDashredisLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Single endpoint to trigger a job\n"
      }
    },
    "PreprocessDashwithDashredisLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-preprocess-with-redis",
        "Handler": "src/redis_version/preprocessor-redis.readAndFilterFile",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Preprocess lambda which sends SQS message afterwards: preprocess task update data (test data consists of 1000 tasks)\n",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "BUCKET": "test-task-update-data-v2",
            "SUBRESULT_FOLDER": "test_results",
            "REGION": "eu-central-1",
            "QUEUE_NAME": "PreprocessedDataQueueRedis",
            "REDIS_CONNECTION": "redis://:redis-password@18.156.33.173:6379"
          }
        }
      },
      "DependsOn": [
        "PreprocessDashwithDashredisLogGroup"
      ]
    },
    "PreprocessDashwithDashredisLambdaVersionkF3uISuPRTGGZQR7gihvLvQeUstDNqeiJ8ulAI55ccs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PreprocessDashwithDashredisLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Preprocess lambda which sends SQS message afterwards: preprocess task update data (test data consists of 1000 tasks)\n"
      }
    },
    "CalculateDashwithDashredisLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-calculate-with-redis",
        "Handler": "src/redis_version/calculator-redis.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Single lambda - calulator lambda after receiving sqs message, fetch cleaned up test data from S3 and calculates GSD index\n",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "BUCKET": "test-task-update-data-v2",
            "SUBRESULT_FOLDER": "test_results",
            "PIPELINE_RESULT_FOLDER": "gsd",
            "REDIS_CONNECTION": "redis://:redis-password@18.156.33.173:6379",
            "REGION": "eu-central-1",
            "QUEUE_NAME": "PreprocessedDataQueueRedis"
          }
        }
      },
      "DependsOn": [
        "CalculateDashwithDashredisLogGroup"
      ]
    },
    "CalculateDashwithDashredisLambdaVersionXCjHzrDX95WldJESFYkhjC54Wibwt4tJMyc8Yu0Pfn8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CalculateDashwithDashredisLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Single lambda - calulator lambda after receiving sqs message, fetch cleaned up test data from S3 and calculates GSD index\n"
      }
    },
    "StartDashjobDashwithoutDashtracingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-start-job-without-tracing",
        "Handler": "src/without_tracing/job_manager-original.startJob",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Single endpoint to trigger a job\n",
        "TracingConfig": {
          "Mode": "Active"
        }
      },
      "DependsOn": [
        "StartDashjobDashwithoutDashtracingLogGroup"
      ]
    },
    "StartDashjobDashwithoutDashtracingLambdaVersion3Y1HiUHYkill6BZNsBwRzfzarismpOwgGdCohfBZXk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StartDashjobDashwithoutDashtracingLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Single endpoint to trigger a job\n"
      }
    },
    "PreprocessDashwithoutDashtracingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-preprocess-without-tracing",
        "Handler": "src/without_tracing/preprocessor-original.readAndFilterFile",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Preprocess lambda which sends SQS message afterwards: preprocess task update data (test data consists of 1000 tasks)\n",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "BUCKET": "test-task-update-data-v2",
            "SUBRESULT_FOLDER": "test_results",
            "REGION": "eu-central-1",
            "QUEUE_NAME": "PreprocessedDataQueueWithoutTracing"
          }
        }
      },
      "DependsOn": [
        "PreprocessDashwithoutDashtracingLogGroup"
      ]
    },
    "PreprocessDashwithoutDashtracingLambdaVersionkuKlr9rVR5TvuEctpysgUHhmNoeAzelwPzPFUtFDuSE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PreprocessDashwithoutDashtracingLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Preprocess lambda which sends SQS message afterwards: preprocess task update data (test data consists of 1000 tasks)\n"
      }
    },
    "CalculateDashwithoutDashtracingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gsd-index-calculator/dev/1602111354227-2020-10-07T22:55:54.227Z/gsd-index-calculator.zip"
        },
        "FunctionName": "gsd-index-calculator-dev-calculate-without-tracing",
        "Handler": "src/without_tracing/calculator-original.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Description": "Single lambda - calulator lambda after receiving sqs message, fetch cleaned up test data from S3 and calculates GSD index\n",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "BUCKET": "test-task-update-data-v2",
            "SUBRESULT_FOLDER": "test_results",
            "PIPELINE_RESULT_FOLDER": "gsd",
            "REGION": "eu-central-1",
            "QUEUE_NAME": "PreprocessedDataQueueWithoutTracing"
          }
        }
      },
      "DependsOn": [
        "CalculateDashwithoutDashtracingLogGroup"
      ]
    },
    "CalculateDashwithoutDashtracingLambdaVersionCMbzNV3ktNFhIKKfpRcbRNS9ST7Jkhc0VnQMazxbKA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CalculateDashwithoutDashtracingLambdaFunction"
        },
        "CodeSha256": "H87V/rfLoTKt9i8UWpANjIMqWOA8/c+PL1I65+aEWDU=",
        "Description": "Single lambda - calulator lambda after receiving sqs message, fetch cleaned up test data from S3 and calculates GSD index\n"
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-gsd-index-calculator",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceCleanup": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "cleanup",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePreprocess": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "preprocess",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceStartDashjob": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "start-job",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceStartDashjobDashwithDashxray": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "start-job-with-xray",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePreprocessDashwithDashxray": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "preprocess-with-xray",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceStartDashjobDashwithDashredis": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "start-job-with-redis",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePreprocessDashwithDashredis": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "preprocess-with-redis",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceStartDashjobDashwithoutDashtracing": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "start-job-without-tracing",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePreprocessDashwithoutDashtracing": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "preprocess-without-tracing",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCleanupGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCleanup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CleanupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPreprocessPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePreprocess"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PreprocessLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodStartDashjobPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceStartDashjob"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "StartDashjobLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodStartDashjobDashwithDashxrayPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceStartDashjobDashwithDashxray"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "StartDashjobDashwithDashxrayLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPreprocessDashwithDashxrayPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePreprocessDashwithDashxray"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PreprocessDashwithDashxrayLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodStartDashjobDashwithDashredisPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceStartDashjobDashwithDashredis"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "StartDashjobDashwithDashredisLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPreprocessDashwithDashredisPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePreprocessDashwithDashredis"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PreprocessDashwithDashredisLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodStartDashjobDashwithoutDashtracingPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceStartDashjobDashwithoutDashtracing"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "StartDashjobDashwithoutDashtracingLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPreprocessDashwithoutDashtracingPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePreprocessDashwithoutDashtracing"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PreprocessDashwithoutDashtracingLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1602111314648": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodCleanupGet",
        "ApiGatewayMethodPreprocessPost",
        "ApiGatewayMethodStartDashjobPost",
        "ApiGatewayMethodStartDashjobDashwithDashxrayPost",
        "ApiGatewayMethodPreprocessDashwithDashxrayPost",
        "ApiGatewayMethodStartDashjobDashwithDashredisPost",
        "ApiGatewayMethodPreprocessDashwithDashredisPost",
        "ApiGatewayMethodStartDashjobDashwithoutDashtracingPost",
        "ApiGatewayMethodPreprocessDashwithoutDashtracingPost"
      ]
    },
    "CleanupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CleanupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PreprocessLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PreprocessLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "StartDashjobLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "StartDashjobLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "StartDashjobDashwithDashxrayLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "StartDashjobDashwithDashxrayLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PreprocessDashwithDashxrayLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PreprocessDashwithDashxrayLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "StartDashjobDashwithDashredisLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "StartDashjobDashwithDashredisLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PreprocessDashwithDashredisLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PreprocessDashwithDashredisLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "StartDashjobDashwithoutDashtracingLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "StartDashjobDashwithoutDashtracingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PreprocessDashwithoutDashtracingLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PreprocessDashwithoutDashtracingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CalculateEventSourceMappingSQSPreprocessedDataQueueFiFo": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "PreprocessedDataQueueFiFo",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "CalculateLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "CalculateDashwithDashxrayEventSourceMappingSQSPreprocessedDataQueueXRay": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "PreprocessedDataQueueXRay",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "CalculateDashwithDashxrayLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "CalculateDashwithDashredisEventSourceMappingSQSPreprocessedDataQueueRedis": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "PreprocessedDataQueueRedis",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "CalculateDashwithDashredisLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "CalculateDashwithoutDashtracingEventSourceMappingSQSPreprocessedDataQueueWithoutTracing": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "PreprocessedDataQueueWithoutTracing",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "CalculateDashwithoutDashtracingLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "PreprocessedDataQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "PreprocessedDataQueue",
        "VisibilityTimeout": 300
      }
    },
    "PreprocessedDataQueueFiFo": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "PreprocessedDataQueueFiFo.fifo",
        "FifoQueue": true,
        "VisibilityTimeout": 300
      }
    },
    "PreprocessedDataQueueXRay": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "PreprocessedDataQueueXRay",
        "VisibilityTimeout": 300
      }
    },
    "PreprocessedDataQueueRedis": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "PreprocessedDataQueueRedis",
        "VisibilityTimeout": 300
      }
    },
    "PreprocessedDataQueueWithoutTracing": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "PreprocessedDataQueueWithoutTracing",
        "VisibilityTimeout": 300
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "CleanupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CleanupLambdaVersionoNSayZp3BHS5w3r5qeaesJz5ufa3DG9RYs2BmG81Y"
      }
    },
    "PreprocessLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PreprocessLambdaVersion8zQ4Dd6REZ2wumSHG59UEeXjhF7aVmI33wZoRC4Y"
      }
    },
    "CalculateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CalculateLambdaVersion9BqScGzXEsE6wLqM4MsEBHvhvLOAeMkEiYpKzWhqZU"
      }
    },
    "StartDashjobLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StartDashjobLambdaVersiontsO2eS01U6dxypjLlCzJzayV8GSoLEUyKfMgN3Xkaw"
      }
    },
    "StartDashjobDashwithDashxrayLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StartDashjobDashwithDashxrayLambdaVersionGccnLqy6gTSvbxzJ0QWReRqplbfctyTZ1YJXaCE"
      }
    },
    "PreprocessDashwithDashxrayLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PreprocessDashwithDashxrayLambdaVersionxPYGVxSb6s937z7IskbivKXJzpQ8hNaWlW2YUbNeA"
      }
    },
    "CalculateDashwithDashxrayLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CalculateDashwithDashxrayLambdaVersionkxuEweuqPUVSWmTLZ7xzQD51zaggJmUULojL7RNAwA"
      }
    },
    "StartDashjobDashwithDashredisLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StartDashjobDashwithDashredisLambdaVersionjd6tbXN8oXaZ58fhsxHSIoAuQTewqD4BvmqJpvqo"
      }
    },
    "PreprocessDashwithDashredisLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PreprocessDashwithDashredisLambdaVersionkF3uISuPRTGGZQR7gihvLvQeUstDNqeiJ8ulAI55ccs"
      }
    },
    "CalculateDashwithDashredisLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CalculateDashwithDashredisLambdaVersionXCjHzrDX95WldJESFYkhjC54Wibwt4tJMyc8Yu0Pfn8"
      }
    },
    "StartDashjobDashwithoutDashtracingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StartDashjobDashwithoutDashtracingLambdaVersion3Y1HiUHYkill6BZNsBwRzfzarismpOwgGdCohfBZXk"
      }
    },
    "PreprocessDashwithoutDashtracingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PreprocessDashwithoutDashtracingLambdaVersionkuKlr9rVR5TvuEctpysgUHhmNoeAzelwPzPFUtFDuSE"
      }
    },
    "CalculateDashwithoutDashtracingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CalculateDashwithoutDashtracingLambdaVersionCMbzNV3ktNFhIKKfpRcbRNS9ST7Jkhc0VnQMazxbKA"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}